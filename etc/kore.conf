# Example Kore configuration

# Server configuration.
bind		* 443

# The path worker processes will chroot too after starting.
chroot		/var/kore/chroot

# Worker processes will run as the specified user.
runas		kore

# Set workers to the amount of CPU's available in your system,
# kore will automatically distribute all workers on them.
workers		4

# The number of active connections each worker can handle.
# You might have to tweak this number based on your hardware.
#worker_max_connections		250

# Store the main process its pid in this file.
#pidfile	/var/run/kore.pid

# The onload function is called everytime the module is loaded or reloaded.
#onload myinit

# Specifies what module to be loaded.
load /var/kore/modules/j4.pe/j4.pe.module

# Specify the SSL ciphers that will be used.
#ssl_cipher	HIGH:!aNULL:!MD5;

# Domain configuration
#
# Each domain configuration starts with listing what domain
# the directives that follow are to be applied upon.
#
# Additionally you can specify the following in a domain configuration:
#
#	accesslog:	File where all requests are logged.
#
# Handlers
#
# Handlers are either static (for fixed paths) or dynamic.
# Dynamic handlers take a POSIX regular expression as its path.
#
# Syntax:
#	handler		path		module_callback

# Example domain that responds to 10.211.55.3.
domain j4.pe {
	certfile	/var/kore/modules/j4.pe/ssl/j4.pe_cert.pem
	certkey		/var/kore/modules/j4.pe/ssl/j4.pe_privatekey.pem
	accesslog	/var/log/kore_access.log
	static		/			serve_index
	static 		/ip			serve_ip
	static		/qr			serve_qr
	static		/blog		serve_blog
}

#domain domain.com {
#	certfile	cert/other/server.crt
#	certkey		cert/other/server.key
#	accesslog	/var/log/other_kore_access.log
#	static		/css/style.css		serve_style_css
#	static		/			serve_index
#	dynamic		^/[a-z0-9_]*$		serve_profile
#}
